package batch.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0b, conceptFqName)) {
      case 0:
        return new ConceptDescriptorBuilder("batch.structure.Command").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "batch.structure.ICommand").properties("name").children(new String[]{"params"}, new boolean[]{false}).alias("cmd", "").create();
      case 1:
        return new ConceptDescriptorBuilder("batch.structure.CommandBlock").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"commands"}, new boolean[]{true}).create();
      case 2:
        return new ConceptDescriptorBuilder("batch.structure.ECHO").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "batch.structure.ICommand").children(new String[]{"args"}, new boolean[]{false}).alias("echo", "").create();
      case 3:
        return new ConceptDescriptorBuilder("batch.structure.ECHOTO").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "batch.structure.ICommand").children(new String[]{"dest", "content"}, new boolean[]{false, false}).alias("et", "").create();
      case 4:
        return new ConceptDescriptorBuilder("batch.structure.ERROR_LEVEL").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "batch.structure.IValue").alias("err", "").create();
      case 5:
        return new ConceptDescriptorBuilder("batch.structure.FunctionCall").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "batch.structure.ICommand").references("function").children(new String[]{"params"}, new boolean[]{false}).create();
      case 6:
        return new ConceptDescriptorBuilder("batch.structure.FunctionDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"body", "params"}, new boolean[]{false, true}).alias("def", "").create();
      case 7:
        return new ConceptDescriptorBuilder("batch.structure.FunctionsBlock").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"functions"}, new boolean[]{true}).create();
      case 8:
        return new ConceptDescriptorBuilder("batch.structure.ICommand").interface_().parents("batch.structure.IToken").create();
      case 9:
        return new ConceptDescriptorBuilder("batch.structure.IToken").interface_().create();
      case 10:
        return new ConceptDescriptorBuilder("batch.structure.IValue").interface_().create();
      case 11:
        return new ConceptDescriptorBuilder("batch.structure.IntLiteral").super_("jetbrains.mps.baseLanguage.structure.IntegerLiteral").parents("jetbrains.mps.baseLanguage.structure.IntegerLiteral", "batch.structure.IValue").properties("value").alias("0", "").create();
      case 12:
        return new ConceptDescriptorBuilder("batch.structure.LogicalExpression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").create();
      case 13:
        return new ConceptDescriptorBuilder("batch.structure.PAUSE").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "batch.structure.ICommand").alias("pause", "").create();
      case 14:
        return new ConceptDescriptorBuilder("batch.structure.ParamReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "batch.structure.IValue").references("original").alias("p", "").create();
      case 15:
        return new ConceptDescriptorBuilder("batch.structure.Parameter").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").create();
      case 16:
        return new ConceptDescriptorBuilder("batch.structure.Params").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"params"}, new boolean[]{true}).create();
      case 17:
        return new ConceptDescriptorBuilder("batch.structure.SET").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "batch.structure.ICommand").children(new String[]{"var", "value"}, new boolean[]{false, false}).alias("set", "").create();
      case 18:
        return new ConceptDescriptorBuilder("batch.structure.Script").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("description").children(new String[]{"code", "functions"}, new boolean[]{false, false}).create();
      case 19:
        return new ConceptDescriptorBuilder("batch.structure.String").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "batch.structure.IValue").children(new String[]{"content"}, new boolean[]{true}).create();
      case 20:
        return new ConceptDescriptorBuilder("batch.structure.StringLiteral").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "batch.structure.IValue").properties("value").alias("\"", "").create();
      case 21:
        return new ConceptDescriptorBuilder("batch.structure.VarReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "batch.structure.IValue").references("value").alias("r", "").create();
      case 22:
        return new ConceptDescriptorBuilder("batch.structure.Variable").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").alias("var", "").create();
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }

  private static String[] stringSwitchCases_1htk8d_a0a0b = new String[]{"batch.structure.Command", "batch.structure.CommandBlock", "batch.structure.ECHO", "batch.structure.ECHOTO", "batch.structure.ERROR_LEVEL", "batch.structure.FunctionCall", "batch.structure.FunctionDeclaration", "batch.structure.FunctionsBlock", "batch.structure.ICommand", "batch.structure.IToken", "batch.structure.IValue", "batch.structure.IntLiteral", "batch.structure.LogicalExpression", "batch.structure.PAUSE", "batch.structure.ParamReference", "batch.structure.Parameter", "batch.structure.Params", "batch.structure.SET", "batch.structure.Script", "batch.structure.String", "batch.structure.StringLiteral", "batch.structure.VarReference", "batch.structure.Variable"};
}
