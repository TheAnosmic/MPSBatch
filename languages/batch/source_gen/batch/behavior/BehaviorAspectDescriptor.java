package batch.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;

public class BehaviorAspectDescriptor implements jetbrains.mps.smodel.runtime.BehaviorAspectDescriptor {
  public BehaviorAspectDescriptor() {
  }

  public BehaviorDescriptor getDescriptor(String fqName) {
    switch (Arrays.binarySearch(stringSwitchCases_846f5o_a0a0b, fqName)) {
      case 14:
        return new SET_BehaviorDescriptor();
      case 15:
        return new Script_BehaviorDescriptor();
      case 19:
        return new Variable_BehaviorDescriptor();
      case 18:
        return new VarReference_BehaviorDescriptor();
      case 0:
        return new Command_BehaviorDescriptor();
      case 2:
        return new ECHO_BehaviorDescriptor();
      case 16:
        return new String_BehaviorDescriptor();
      case 9:
        return new LogicalExpression_BehaviorDescriptor();
      case 6:
        return new FunctionDeclaration_BehaviorDescriptor();
      case 1:
        return new CommandBlock_BehaviorDescriptor();
      case 13:
        return new Params_BehaviorDescriptor();
      case 17:
        return new StringLiteral_BehaviorDescriptor();
      case 8:
        return new IntLiteral_BehaviorDescriptor();
      case 12:
        return new Parameter_BehaviorDescriptor();
      case 11:
        return new ParamReference_BehaviorDescriptor();
      case 7:
        return new FunctionsBlock_BehaviorDescriptor();
      case 5:
        return new FunctionCall_BehaviorDescriptor();
      case 10:
        return new PAUSE_BehaviorDescriptor();
      case 3:
        return new ECHOTO_BehaviorDescriptor();
      case 4:
        return new ERROR_LEVEL_BehaviorDescriptor();
      default:
        return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
    }
  }

  private static String[] stringSwitchCases_846f5o_a0a0b = new String[]{"batch.structure.Command", "batch.structure.CommandBlock", "batch.structure.ECHO", "batch.structure.ECHOTO", "batch.structure.ERROR_LEVEL", "batch.structure.FunctionCall", "batch.structure.FunctionDeclaration", "batch.structure.FunctionsBlock", "batch.structure.IntLiteral", "batch.structure.LogicalExpression", "batch.structure.PAUSE", "batch.structure.ParamReference", "batch.structure.Parameter", "batch.structure.Params", "batch.structure.SET", "batch.structure.Script", "batch.structure.String", "batch.structure.StringLiteral", "batch.structure.VarReference", "batch.structure.Variable"};
}
